// Generated by view binder compiler. Do not edit!
package com.example.iattendance.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.iattendance.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HomeCategoryRecviewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView categoryCnt;

  @NonNull
  public final TextView categoryTxt;

  @NonNull
  public final MaterialButton signupBtn;

  @NonNull
  public final RecyclerView subjRecView;

  private HomeCategoryRecviewBinding(@NonNull LinearLayout rootView, @NonNull TextView categoryCnt,
      @NonNull TextView categoryTxt, @NonNull MaterialButton signupBtn,
      @NonNull RecyclerView subjRecView) {
    this.rootView = rootView;
    this.categoryCnt = categoryCnt;
    this.categoryTxt = categoryTxt;
    this.signupBtn = signupBtn;
    this.subjRecView = subjRecView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HomeCategoryRecviewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HomeCategoryRecviewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.home_category_recview, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HomeCategoryRecviewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.category_cnt;
      TextView categoryCnt = ViewBindings.findChildViewById(rootView, id);
      if (categoryCnt == null) {
        break missingId;
      }

      id = R.id.category_txt;
      TextView categoryTxt = ViewBindings.findChildViewById(rootView, id);
      if (categoryTxt == null) {
        break missingId;
      }

      id = R.id.signupBtn;
      MaterialButton signupBtn = ViewBindings.findChildViewById(rootView, id);
      if (signupBtn == null) {
        break missingId;
      }

      id = R.id.subj_recView;
      RecyclerView subjRecView = ViewBindings.findChildViewById(rootView, id);
      if (subjRecView == null) {
        break missingId;
      }

      return new HomeCategoryRecviewBinding((LinearLayout) rootView, categoryCnt, categoryTxt,
          signupBtn, subjRecView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
